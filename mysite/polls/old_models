"""from django.db import models

# Create your models here.
from django.db import models
class Courses(models.Model):
    course_name = models.CharField(max_length=30)
    course_duration_month = models.IntegerField
class Student(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email_id = models.CharField(max_length=50,primary_key=True)
    student_id = models.CharField(max_length=20)
    course_id = models.ForeignKey(Courses, null=True, on_delete=models.CASCADE)
    
"""
from django.db import models

class Course(models.Model):
    course_name = models.CharField(max_length=30)
    course_duration_months = models.IntegerField()

    def __str__(self):
        return f"{self.course_name} ({self.course_duration_months} months)"

class Student(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email_id = models.CharField(max_length=50)
    student_id = models.CharField(max_length=20, unique=True)
    course_id = models.ForeignKey(Course, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.firstname} {self.lastname} ({self.email})"

class Department(models.Model):
    name = models.CharField(max_length=100)
    head_professor = models.CharField(max_length=100)
    asst_professor = models.CharField(max_length=100)
    visiting_faculty = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Professor(models.Model):
    name = models.CharField(max_length=100)
    prof_name = models.CharField(max_length=100)
    department_id = models.ForeignKey(Department, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return self.name

class Subject(models.Model):
    sub_name = models.CharField(max_length=100)
    min_marks_to_pass = models.IntegerField()

    def __str__(self):
        return self.sub_name

class Enrollment(models.Model):
    start_date = models.DateField()
    end_date = models.DateField()
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return f"Enrollment of {self.student} in {self.course}"

class Exams(models.Model):
    date = models.DateField()
    subject = models.ForeignKey(Subject, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return f"Exam for {self.subject} on {self.date}"

class Marks(models.Model):
    marks_obtained = models.IntegerField()
    student = models.ForeignKey(Student, null=True, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, null=True, on_delete=models.CASCADE)
    exam = models.ForeignKey(Exams, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.student} - {self.subject}: {self.marks_obtained}"
"""




from django.db import models
from datetime import date

class Department(models.Model):
    DEPARTMENT_CHOICES = [
        ('CS', 'Computer Science'),
        ('Math', 'Mathematics'),
        ('Business', 'Business'),
    ]

    department_id = models.CharField(max_length=10, primary_key=True)
    name = models.CharField(max_length=50, choices=DEPARTMENT_CHOICES)
    def __str__(self):
        return f"{self.course_name} ({self.course_duration_months} months)"
class Course(models.Model):
    COURSE_TYPES = [
        ('UG', 'Undergraduate'),
        ('PG', 'Postgraduate'),
        ('Diploma', 'Diploma'),
        ('Cert', 'Certificate'),
    ]

    
    department = models.ForeignKey(Department, on_delete=models.CASCADE, related_name='courses')
    name = models.CharField(max_length=50)
    course_type = models.CharField(max_length=10, choices=COURSE_TYPES)

class Semester(models.Model):
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='semesters')
    semester_number = models.PositiveIntegerField()

class Faculty(models.Model):
    FACULTY_ROLES = [
        ('Professor', 'Professor'),
        ('Asst Professor', 'Assistant Professor'),
        ('Visiting Faculty', 'Visiting Faculty'),
    ]

    faculty_id = models.CharField(max_length=10, primary_key=True)
    department = models.ForeignKey(Department, on_delete=models.CASCADE, related_name='faculties')
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField(max_length=50)
    role = models.CharField(max_length=20, choices=FACULTY_ROLES)

class Subject(models.Model):
    semester = models.ForeignKey(Semester, on_delete=models.CASCADE, related_name='subjects')
    name = models.CharField(max_length=50)
    min_marks = models.PositiveIntegerField()  # Minimum marks required to pass the subject

class Student(models.Model):
    student_id = models.CharField(max_length=20, primary_key=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email_id = models.EmailField(max_length=50, default='default@example.com')
    department = models.ForeignKey(Department, null=True, on_delete=models.SET_NULL)
    course_id = models.ForeignKey(Course, null=True, on_delete=models.SET_NULL)
    semester = models.ForeignKey(Semester, null=True, on_delete=models.SET_NULL)
    enrollment_start_date = models.DateField(default=date.today)
    enrollment_end_date = models.DateField(default=date.today)

class Enrollment(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course_id = models.ForeignKey(Course, on_delete=models.CASCADE)
    enrollment_date = models.DateField()

class Exam(models.Model):
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    exam_date = models.DateField()
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    marks = models.PositiveIntegerField()
"""
